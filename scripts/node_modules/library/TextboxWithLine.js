//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Label = require('sf-core/ui/label');
const TextBox = require('sf-core/ui/textbox');

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const TextboxWithLine = extend(FlexLayout)(
  //constructor
  function(_super, props) {
    // initalizes super class for this component scope
    _super(this, props);

    const textboxInfoStyle = getCombinedStyle(".label .label-login.small .label-textboxWithLine.normal", {
      text: "",
      width: NaN,
      height: 20,
      marginLeft: 10,
      marginRight: 10,
      id: 100
    });
    var textboxInfo = new Label(textboxInfoStyle);
    if (textboxInfoStyle.scrollEnabled === false)
      textboxInfo.ios && (textboxInfo.ios.scrollEnabled = false);
    this.addChild(textboxInfo);
    this.textboxInfo = textboxInfo;

    const innerTextboxStyle = getCombinedStyle(".textBox", {
      width: NaN,
      height: NaN,
      backgroundColor: Color.create(0, 255, 255, 255),
      textColor: Color.create(255, 255, 255, 255),
      text: "",
      marginLeft: 10,
      marginRight: 10,
      id: 101,
      flexGrow: 1
    });
    var innerTextbox = new TextBox(innerTextboxStyle);
    if (innerTextboxStyle.hintTextColor)
      innerTextbox.android && (innerTextbox.android.hintTextColor = innerTextboxStyle.hintTextColor);
    if (innerTextboxStyle.elevation)
      innerTextbox.android && (innerTextbox.android.elevation = innerTextboxStyle.elevation);
    if (innerTextboxStyle.keyboardAppearance)
      innerTextbox.ios && (innerTextbox.ios.keyboardAppearance = innerTextboxStyle.keyboardAppearance);
    if (innerTextboxStyle.clearButtonEnabled)
      innerTextbox.ios && (innerTextbox.ios.clearButtonEnabled = innerTextboxStyle.clearButtonEnabled);
    if (innerTextboxStyle.minimumFontSize)
      innerTextbox.ios && (innerTextbox.ios.minimumFontSize = innerTextboxStyle.minimumFontSize);
    if (innerTextboxStyle.adjustFontSizeToFit)
      innerTextbox.ios && (innerTextbox.ios.adjustFontSizeToFit = innerTextboxStyle.adjustFontSizeToFit);
    this.addChild(innerTextbox);
    this.innerTextbox = innerTextbox;

    const textboxBottomLineStyle = getCombinedStyle(".flexLayout", {
      width: NaN,
      height: 1,
      marginLeft: 10,
      marginRight: 10,
      id: 102,
      flexGrow: 0
    });
    var textboxBottomLine = new FlexLayout(textboxBottomLineStyle);
    this.addChild(textboxBottomLine);
    this.textboxBottomLine = textboxBottomLine;

    //assign the children to textboxWithLine 
    this.children = Object.assign({}, {
      textboxInfo: textboxInfo,
      innerTextbox: innerTextbox,
      textboxBottomLine: textboxBottomLine
    });

  });

TextboxWithLine.defaults = getCombinedStyle(".flexLayout", {
  height: 60,
  width: 250,
  backgroundColor: Color.create(0, 255, 255, 255),
  paddingLeft: NaN,
  paddingRight: NaN,
  positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = TextboxWithLine);